<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
	xmlns:controls="org.un.cava.birdeye.ravis.components.ui.controls.vgraphControls.*" borderColor="#306999" themeColor="#367EAC">


	<mx:Script>
	<![CDATA[
		import mx.events.TweenEvent;
		import com.swfjunkie.tweetr.data.objects.UserData;
		import com.swfjunkie.tweetr.data.objects.StatusData;
		import com.swfjunkie.tweetr.events.TweetEvent;
		import com.swfjunkie.tweetr.Tweetr;
		import mx.controls.Alert;
		
		
		import org.un.cava.birdeye.ravis.graphLayout.data.INode;
		import org.un.cava.birdeye.ravis.graphLayout.data.IGraph;
		import org.un.cava.birdeye.ravis.graphLayout.data.Graph;			
		import org.un.cava.birdeye.ravis.graphLayout.visual.VisualNode;
		import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
		import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualGraph;
		import org.un.cava.birdeye.ravis.graphLayout.visual.IEdgeRenderer;
		import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
		import org.un.cava.birdeye.ravis.graphLayout.layout.ConcentricRadialLayouter;
		import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedBalloonEdgeRenderer;
		import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;
		
		// These are the item renderers
		import renderers.nodes.mxml.eventNodeRenderer;
		import renderers.edgelabels.mxml.shapeEdgeLabelRenderer;
				

		
		public var noeud:String;
		public var edge:String;
		
		public var stNoeud:String;
		public var stEdge:String=' ';
		
		public var graphe:XML;
		
							
		
		private function connect():void
		{
        	// create a new tweetr instance
            var tweetr:Tweetr = new Tweetr();
            // since we are using it on the web, set 
            // the serviceHost to the tweetr php-proxy
            //tweetr.serviceHost = "labs.swfjunkie.com/tweetr/proxy";
            
            // set the browserAuth to false so we actually use
            // the AIR authentication scheme
            tweetr.browserAuth = false;
                
            // pass the username & password
            tweetr.username = txtUser.text;
            tweetr.password = txtPass.text;
            
            //construction of the main node
    
              
            // add event listeners
            tweetr.addEventListener(TweetEvent.COMPLETE, handleLoad);
            tweetr.addEventListener(TweetEvent.FAILED, handleFail);
            
            // now let's retrieve the followers
            tweetr.getFriends(txtUser.text, 1);
            
            graphe = <Graph> 
						<Node> id= "0" name ={txtUser.text} desc="It's me" nodeColor="0x4682b4" nodeSize="40" nodeClass="earth" nodeIcon="center" x="10" y="10" </Node> 
 					 </Graph>;
            	
           }
		

		
		
       	/**
       	* @private
       	* If everything goes well, we get an event with an
       	* array full of StatusData Objects
       	*/
       	private function handleLoad(event:TweetEvent):void
       	{
       	  
           
           // we'll create a simple array with a object
           // containing the tweet and who sent it.
           var arr:Array = [];
           for(var i:int = 0; i < event.responseArray.length; i++)
           {
               var userData:UserData = event.responseArray[i];
               //var obj:Object = {};
               
               //construction of the node linked to the friend 
               
               noeud = 'id= "' + (i+1) + '" name ="'  + userData.name + '" desc="' + userData.description + '" nodeColor="0x333333" nodeSize="30" nodeClass="tree" nodeIcon="' + i + '" x="10" y="10"' 
               graphe = graphe.appendChild(<Node>{noeud}</Node>);
               
             
          }/*
          stNoeud = stNoeud.concat(stEdge);
          graphe=graphe.appendChild(stNoeud);
          */
           // then pass it to the datagrid
           //datagrid.dataProvider = arr;
           for(var j:int = 0; j < event.responseArray.length; j++)
           {
             
               //Construction of the link between the friend and the user
               edge = 'fromID="0" toID="' + (j+1) +'" edgeLabel="Good" flow="1" edgeClass="sun" edgeIcon="Good"';
               graphe = graphe.appendChild(<Edge>{edge}</Edge>);
               
             
          }
           initData();
       	}
        	

        	
		
		/**
        * @private
        * If something go wrong, show an alert window with the info
        */ 
        private function handleFail(event:TweetEvent):void
        {
            Alert.show(event.info,"Epic Fail");
        }
        
        
        
        			// graph datastructure object
			private var graph:IGraph;
			// active layouter
			private var layouter:ILayoutAlgorithm;
			// edge renderer
			private var selectedEdgeRenderer:IEdgeRenderer;
			// root node to start with
			private var startRoot:IVisualNode;
			// this is used to display the number of visible items
			private var itemCount:int = 0;
			// important to ensure we are done with the main initialisation
			private var initDone:Boolean = false;
			
			/*
			 * event handler for HTTPService, does all the remaining required
			 * initialisation */
			
			private function initData():void {
				/* init a graph object with the XML data */
				graph = new org.un.cava.birdeye.ravis.graphLayout.data.Graph("XMLAsDocsGraph",false,graphe);
				
				
				/* set the graph in the VGraph object, this automatically
				 * initializes the VGraph items; 
				 * note: vgraph is the id of the mxml specified VisualGraph component */
				vgraph.graph = graph;

				/* set the default layouter type */
				layouter = new ConcentricRadialLayouter(vgraph);
				vgraph.layouter = layouter;
				
				/* set autofit */
				layouter.autoFitEnabled = true;
				
				/* set the layouter */
				vgraph.edgeRenderer = new DirectedBalloonEdgeRenderer(vgraph.edgeDrawGraphics);
				
				/* set the visibility limit options, default 2 
				* a.k.a degrees of separation */
				vgraph.maxVisibleDistance = 2;
				
				/* select a root node, most layouters requires a root node
				*  Note: Id 1 is referring to node id in the XML file */
				startRoot = graph.nodeByStringId("0").vnode;
						
				/* set if edge labels should be displayed */
				vgraph.displayEdgeLabels = true;

				/* the following kicks it off .... */
				vgraph.currentRootVNode = startRoot;
				initDone = true;
				vgraph.draw();
			}
        
        
				
	]]>
</mx:Script>	
	<mx:Button x="21" y="158" label="Lancer la visualisation" id="idButt" click="connect()" width="133"/>
	<mx:TextInput x="21" y="102" id="txtPass" width="133" displayAsPassword="true"/>
	<mx:TextInput x="21" y="51" id="txtUser" width="133"/>
	<mx:Label x="21" y="28" text="User Name" width="163" id="userLbl"/>
	<mx:Label x="21" y="81" text="Password" width="163" id="passLbl"/>
	

	
	
	<mx:Style source="styles/main.css" />

	<mx:Panel id="main" title="Twitter" width="674" height="100%" 
		verticalAlign="middle" horizontalAlign="center" 
		borderColor="#3380E0" paddingBottom="5" horizontalGap="5" x="192">
		<mx:Canvas id="graphCnvs" width="100%" height="100%"  >		
			<ravis:VisualGraph id="vgraph" 
				paddingBottom="5" left="241" right="0" top="0" bottom="0"
				backgroundColor="#FFFFFF" alpha="1"
				itemRenderer="renderers.nodes.mxml.eventNodeRenderer"
				edgeLabelRenderer="renderers.edgelabels.mxml.shapeEdgeLabelRenderer" 
				visibilityLimitActive="true"
				 borderColor="#367FB2">
			</ravis:VisualGraph>
			<mx:VBox x="10" y="10" >
				<mx:Label text="Friend ID:" fontWeight="bold" />
				<mx:Label id="nodeID" text="" />
				<mx:Label text="Friend Name:" fontWeight="bold" />
				<mx:Label id="nodeName" text="" />
				<mx:Label text="Friend Desc:" fontWeight="bold" />
				<mx:Label id="nodeDesc" text="" />
			</mx:VBox>
		<controls:DegreesOfSeparation id="dosSlider" width="200" bottom="0" left="5" vgraph="{vgraph}" />
		<mx:Label text="Double Click Node to Traverse Graph" bottom="0" right="5" />
		</mx:Canvas>
	</mx:Panel>		
		
	
</mx:WindowedApplication>
