<?xml version="1.0" encoding="utf-8"?>
<!--
 * The MIT License
 *
 * Copyright (c) 2008
 * United Nations Office at Geneva
 * Center for Advanced Visual Analytics
 * http://cava.unog.ch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 -->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
	xmlns:controls="org.un.cava.birdeye.ravis.components.ui.controls.vgraphControls.*"
	creationComplete="initData();" width="100%" height="100%" >

<!--
DEMO LEVEL 2:
The purpose of this demo is to explain the creating a simple graph with controls and events.

From LEVEL 1
1.) Using an XML data source
2.) Initiating a graph
3.) Setting a layouter

LEVEL 2 (extended)
4.) Setting an edge line style parameter (color) based on data
5.) *Specifying a node renderer which will color and size based on data as well as rotate to angle
6.) Customizing an edge label

LEVEL 3
7.) Degrees of Separation Control
8.) Node click, show details event

LEVEL 4
9.) Use of zoom controls

-->

	<mx:Script>
		<![CDATA[

       		import org.un.cava.birdeye.ravis.graphLayout.data.INode;
			import org.un.cava.birdeye.ravis.graphLayout.data.IGraph;
			import org.un.cava.birdeye.ravis.graphLayout.data.Graph;			
			import org.un.cava.birdeye.ravis.graphLayout.visual.VisualNode;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualGraph;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ConcentricRadialLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedBalloonEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;
			
			// These are the item renderers
			import renderers.nodes.mxml.eventNodeRenderer;
			import renderers.edgelabels.mxml.shapeEdgeLabelRenderer;

			// graph datastructure object
			private var graph:IGraph;
			// active layouter
			private var layouter:ILayoutAlgorithm;
			// edge renderer
			private var selectedEdgeRenderer:IEdgeRenderer;
			// root node to start with
			private var startRoot:IVisualNode;
			// this is used to display the number of visible items
			private var itemCount:int = 0;
			// important to ensure we are done with the main initialisation
			private var initDone:Boolean = false;
			
			/*
			 * event handler for HTTPService, does all the remaining required
			 * initialisation */
			
			private function initData():void {
				/* init a graph object with the XML data */
		var xml:XML =	<Graph>
  <Node>
    id= "0" name =Flaury desc="It's me" nodeColor="0x4682b4" nodeSize="40" nodeClass="earth" nodeIcon="center" x="10" y="10"
  </Node>
  <Node>
    id= "1" name ="Tristan" desc="" nodeColor="0x333333" nodeSize="30" nodeClass="tree" nodeIcon="0" x="10" y="10"
  </Node>
  <Edge>
    fromID="0" toID="1" edgeLabel="Good" flow="1" edgeClass="sun" edgeIcon="Good"
  </Edge>
  <Node>
    id= "2" name ="RUI ZHOU" desc="" nodeColor="0x333333" nodeSize="30" nodeClass="tree" nodeIcon="1" x="10" y="10"
  </Node>
  <Edge>
    fromID="0" toID="2" edgeLabel="Good" flow="1" edgeClass="sun" edgeIcon="Good"
  </Edge>
  <Node>
    id= "3" name ="olivier" desc="" nodeColor="0x333333" nodeSize="30" nodeClass="tree" nodeIcon="2" x="10" y="10"
  </Node>
  <Edge>
    fromID="0" toID="3" edgeLabel="Good" flow="1" edgeClass="sun" edgeIcon="Good"
  </Edge>
  <Node>
    id= "4" name ="Yannick CHAZE" desc="Cloud Computing, SAAS, Business Intelligence and Data visualization with Flex" nodeColor="0x333333" nodeSize="30" nodeClass="tree" nodeIcon="3" x="10" y="10"
  </Node>
  <Edge>
    fromID="0" toID="4" edgeLabel="Good" flow="1" edgeClass="sun" edgeIcon="Good"
  </Edge>
  <Node>
    id= "5" name ="Ludovic Bouges" desc="" nodeColor="0x333333" nodeSize="30" nodeClass="tree" nodeIcon="4" x="10" y="10"
  </Node>
  <Edge>
    fromID="0" toID="5" edgeLabel="Good" flow="1" edgeClass="sun" edgeIcon="Good"
  </Edge>
</Graph>;
				graph = new org.un.cava.birdeye.ravis.graphLayout.data.Graph("XMLAsDocsGraph",false,xml);
				
				
				/* set the graph in the VGraph object, this automatically
				 * initializes the VGraph items; 
				 * note: vgraph is the id of the mxml specified VisualGraph component */
				vgraph.graph = graph;

				/* set the default layouter type */
				layouter = new ConcentricRadialLayouter(vgraph);
				vgraph.layouter = layouter;
				
				/* set autofit */
				layouter.autoFitEnabled = true;
				
				/* set the layouter */
				vgraph.edgeRenderer = new DirectedBalloonEdgeRenderer(vgraph.edgeDrawGraphics);
				
				/* set the visibility limit options, default 2 
				* a.k.a degrees of separation */
				vgraph.maxVisibleDistance = 2;
				
				/* select a root node, most layouters requires a root node
				*  Note: Id 1 is referring to node id in the XML file */
				startRoot = graph.nodeByStringId("1").vnode;
						
				/* set if edge labels should be displayed */
				vgraph.displayEdgeLabels = true;

				/* the following kicks it off .... */
				vgraph.currentRootVNode = startRoot;
				initDone = true;
				vgraph.draw();
			}
		]]>
	</mx:Script>					

	<mx:Style source="styles/main.css" />
	<mx:XML id="xmldata" source="data/levelgraph.xml" />	
	<mx:Panel id="main" title="Level 3..." width="100%" height="100%" 
		verticalAlign="middle" horizontalAlign="center" 
		borderColor="#3380E0" paddingBottom="5" horizontalGap="5">
		<mx:Canvas id="graphCnvs" width="100%" height="100%"  >		
			<ravis:VisualGraph id="vgraph" width="100%" height="100%" 
				paddingBottom="5" left="0" right="0" top="0" bottom="0"
				backgroundColor="#FFFFFF" alpha="1"
				itemRenderer="renderers.nodes.mxml.eventNodeRenderer"
				edgeLabelRenderer="renderers.edgelabels.mxml.shapeEdgeLabelRenderer" 
				visibilityLimitActive="true"
				borderColor="#367FB2">
			</ravis:VisualGraph>
			<mx:VBox x="10" y="10" >
				<mx:Label text="Node ID:" fontWeight="bold" />
				<mx:Label id="nodeID" text="" />
				<mx:Label text="Node Name:" fontWeight="bold" />
				<mx:Label id="nodeName" text="" />
				<mx:Label text="Node Desc:" fontWeight="bold" />
				<mx:Label id="nodeDesc" text="" />
			</mx:VBox>
		<controls:DegreesOfSeparation id="dosSlider" width="200" bottom="0" left="5" vgraph="{vgraph}" />
		<mx:Label text="Double Click Node to Traverse Graph" bottom="0" right="5" />
		</mx:Canvas>
	</mx:Panel>
</mx:Application>